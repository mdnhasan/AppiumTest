Python Code
desired_caps = dict(

    deviceName='Android',
    platformName='Android',
    appPackage='flipboard.app',
    appActivity='flipboard.activities.LaunchActivity'
)

driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps)
driver.implicitly_wait(5)


or

# desired_caps = {}
# desired_caps['deviceName'] = 'Android'
# desired_caps['platformName'] = 'Android'
# desired_caps['appPackage'] = 'com.amazon.mShop.android.shopping'
# desired_caps['appActivity'] = 'com.amazon.mShop.splashscreen.StartupActivity'







=============================
$ dumpsys window windows | grep -E 'mTopActivityComponent'     --- Android Shell to check open app

dumpsys window windows | grep -E 'mCurrentFocus'


adb shell am start -W -n com.amazon.mShop.android.shopping/com.amazon.mShop.navigation.MainActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000






M Date --- 02/11/2019



====Android UI Auomate command ===

from appium.webdriver.common.appiumby import AppiumBy
driver.find_element(AppiumBy.ANDROID_UIAUTOMATOR, '')


=== Accessbility found command
from appium.webdriver.common.appiumby import AppiumBy
driver.find_element(AppiumBy.ACCESSIBILITY_ID, "Create new contact").click()

=====Android Keyword==

import time

from appium import webdriver
from appium.webdriver.common.appiumby import AppiumBy
from appium.webdriver.appium_service import AppiumService
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import random
from selenium.webdriver.support.select import Select

from appium import webdriver
from pathlib import Path
from appium.webdriver.common.appiumby import AppiumBy
from appium.webdriver.appium_service import AppiumService
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.select import Select



====Android Ui automator code===

driver.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("Skip sign in")')

===Android UI Automator Scroll ===
driver.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true).instance(0))')

Full
-----
driver.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().textContains("Lee Men").instance(0))')

------------
Soft Assert COmmand
"""Soft Assert COmmand in Terminal"""
"""pytest test_validate_title.py -s -v --soft-asserts"""

===========Android Terminal COmmand==
pytest test_appium_integration.py --html=testreports.html ##for html report need to add pytest-html

=============Allure Report =====
Download Allure from https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.21.0/
set system as global in system environmental path
install allure-pytest package in project
add allure report directory
use command >> pytest test_appium_integration.py --alluredir="./allurereport" (Directoryname)

after completing test use command to make html report from allure >> allure server ./allurereport (Directoryname)
or

use command in cmd >>>allure serve C:\Users\nasim\PycharmProjects\AppiumTest\pytest\allurereport (Project DIct)


=========== To add Scrrenshot in allure use command ===

allure.attach(driver.get_screenshot_as_png(), name="Screenshot", attachment_type=AttachmentType.PNG) ###Success Sceenshot

=== To add Scrrenshot for failure case in allure===
create a conftest.py file under pytest/project folder
https://github.com/pytest-dev/pytest/issues/230
---
import pytest

@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)
    return rep
---

then Add following line in test case after import list
----
@pytest.fixture()
def log_on_failure(request):
    yield
    item = request.node
    if item.rep_call.failed:
        allure.attach(driver.get_screenshot_as_png(), name="Screenshot",
                      attachment_type=AttachmentType.PNG)  ###Success Sceensho

-------
Add the line before test case
@pytest.mark.usefixtures("log_on_failure")

==
=============
Log generation
====
Create a utilities folder and log folder
import logging

# logging.basicConfig(filename="..\\logs\\logfile.log", format='%(asctime)s: %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p'
#                     ,level=logging.INFO)
#
# log = logging.getLogger()
#
# log.info("This is our log")

def log():
    logging.basicConfig(filename="..\\logs\\logfile.log", format='%(asctime)s: %(levelname)s: %(message)s',
                        datefmt='%m/%d/%Y %I:%M:%S %p'
                        , level=logging.INFO)

    logger = logging.getLogger()
    return logger

logger = log()
logger.info("This is New LOG")
logger.error("This is error")


